// This file is automatically generated by Citron version 2.0.
//
// The parser class defined below conforms to the CitronParser protocol
// defined in CitronParser.swift. 
// 
// The authors of Citron disclaim copyright to the source code in this file.

// Preface




// Parser class

class CarbonParser: CitronParser {

    // Types

    typealias CitronSymbolNumber = UInt8
    typealias CitronStateNumber = UInt8
    typealias CitronRuleNumber = UInt8

    enum CitronTokenCode: CitronSymbolNumber {
      case LEFT_CURLY_BRACE               =   1
      case RIGHT_CURLY_BRACE              =   2
      case COLON                          =   3
      case COMMA                          =   4
      case DBLARROW                       =   5
      case OR                             =   6
      case AND                            =   7
      case EQUAL_EQUAL                    =   8
      case NOT                            =   9
      case PLUS                           =  10
      case MINUS                          =  11
      case PERIOD                         =  12
      case ARROW                          =  13
      case LEFT_PARENTHESIS               =  14
      case RIGHT_PARENTHESIS              =  15
      case LEFT_SQUARE_BRACKET            =  16
      case RIGHT_SQUARE_BRACKET           =  17
      case IDENTIFIER                     =  18
      case Identifier                     =  19
      case Integer_literal                =  20
      case TRUE                           =  21
      case FALSE                          =  22
      case INT                            =  23
      case BOOL                           =  24
      case TYPE                           =  25
      case AUTO                           =  26
      case FNTY                           =  27
      case EQUAL                          =  28
      case CASE                           =  29
      case DEFAULT                        =  30
      case SEMICOLON                      =  31
      case VAR                            =  32
      case IF                             =  33
      case WHILE                          =  34
      case BREAK                          =  35
      case CONTINUE                       =  36
      case RETURN                         =  37
      case MATCH                          =  38
      case ELSE                           =  39
      case FN                             =  40
      case STRUCT                         =  41
      case CHOICE                         =  42
    }

    enum CitronNonTerminalCode: CitronSymbolNumber {
      case input                          =  43
      case pattern                        =  44
      case expression                     =  45
      case member_designator              =  46
      case paren_expression               =  47
      case tuple                          =  48
      case field                          =  49
      case field_list                     =  50
      case match_clause                   =  51
      case match_clause_list              =  52
      case statement                      =  53
      case optional_else                  =  54
      case statement_list                 =  55
      case return_type                    =  56
      case function_definition            =  57
      case function_declaration           =  58
      case variable_declaration           =  59
      case member                         =  60
      case member_list                    =  61
      case alternative                    =  62
      case alternative_list               =  63
      case declaration                    =  64
      case declaration_list               =  65
    }

    enum CitronSymbolCode : RawRepresentable, Equatable {
        case token(CitronTokenCode)
        case nonterminal(CitronNonTerminalCode)
        case endOfInput

        init(_ token: CitronTokenCode) { self = .token(token) }
        init(_ nonterminal: CitronNonTerminalCode) { self = .nonterminal(nonterminal) }
        init(rawValue: CitronSymbolNumber) {
            if (rawValue == 0) {
                self = .endOfInput
            } else if (rawValue < 43) {
                self = .token(CitronTokenCode(rawValue: rawValue)!)
            } else if (rawValue < 66) {
                self = .nonterminal(CitronNonTerminalCode(rawValue: rawValue)!)
            } else {
                fatalError()
            }
        }

        typealias RawValue = CitronSymbolNumber
        var rawValue: CitronSymbolNumber {
            switch (self) {
            case .token(let t): return t.rawValue
            case .nonterminal(let nt): return nt.rawValue
            case .endOfInput: return 0
            }
        }
    }

    typealias CitronToken = (text: String, position: CitronLexerPosition)

    enum CitronSymbol {
        case yyBaseOfStack
        case yy0(CitronToken)
        case yy25(MemberDesignator)
        case yy41([Expression])
        case yy42(FunctionDeclaration)
        case yy43(MatchClause)
        case yy44([Alternative])
        case yy48(TupleLiteral)
        case yy52((name: String, type: Expression))
        case yy53(Expression)
        case yy55([Declaration])
        case yy58([Statement])
        case yy67(Declaration)
        case yy84(FunctionDefinition)
        case yy87(TypeExpression)
        case yy98(Statement)
        case yy109(Statement?)
        case yy116(Alternative)
        case yy117(Member)
        case yy125([Member])
        case yy131([MatchClause])

        func typeErasedContent() -> Any {
            switch (self) {
            case .yyBaseOfStack: fatalError()
            case .yy0(let value): return value as Any
            case .yy25(let value): return value as Any
            case .yy41(let value): return value as Any
            case .yy42(let value): return value as Any
            case .yy43(let value): return value as Any
            case .yy44(let value): return value as Any
            case .yy48(let value): return value as Any
            case .yy52(let value): return value as Any
            case .yy53(let value): return value as Any
            case .yy55(let value): return value as Any
            case .yy58(let value): return value as Any
            case .yy67(let value): return value as Any
            case .yy84(let value): return value as Any
            case .yy87(let value): return value as Any
            case .yy98(let value): return value as Any
            case .yy109(let value): return value as Any
            case .yy116(let value): return value as Any
            case .yy117(let value): return value as Any
            case .yy125(let value): return value as Any
            case .yy131(let value): return value as Any
            }
        }
    }

    typealias CitronResult = [Declaration]

    // Counts

    let yyNumberOfSymbols: Int = 66
    let yyNumberOfStates: Int = 99

    // Action tables

    let yyLookaheadAction: [(CitronSymbolNumber, CitronParsingAction)] = [
/*   0 */  ( 1, .SH( 5)), (44, .RD(26)), (45, .SH(46)), (46, .SH(93)), (47, .RD(13)),
/*   5 */  (19, .SH(62)), (49, .SH(92)), (50, .RD(30)), ( 9, .SH(28)), (45, .SH(36)),
/*  10 */  (11, .SH(27)), (47, .RD(13)), (28, .RD(54)), (14, .SH( 2)), (45, .SH(45)),
/*  15 */  (31, .RD(54)), (47, .RD(13)), (18, .SR( 2)), ( 1, .SH( 6)), (20, .SR( 6)),
/*  20 */  (21, .SR( 7)), (22, .SR( 8)), (23, .SR( 9)), (24, .SR(10)), (25, .SR(11)),
/*  25 */  (26, .SR(12)), (27, .SH(65)), (45, .SH(37)), (59, .SH(69)), (47, .RD(13)),
/*  30 */  (32, .SH(13)), (32, .SH(16)), (33, .SH(89)), (34, .SH(88)), (35, .SH(87)),
/*  35 */  (36, .SH(86)), (37, .SH(21)), (38, .SH(84)), (40, .SH(97)), (41, .SH(78)),
/*  40 */  (42, .SH(73)), ( 9, .SH(28)), (32, .SH(14)), (11, .SH(27)), (12, .SH(95)),
/*  45 */  (56, .SH(68)), (14, .SH( 2)), (45, .SH(45)), (31, .SR(53)), (47, .RD(13)),
/*  50 */  (18, .SR( 2)), (14, .SH( 3)), (20, .SR( 6)), (21, .SR( 7)), (22, .SR( 8)),
/*  55 */  (23, .SR( 9)), (24, .SR(10)), (25, .SR(11)), (26, .SR(12)), (27, .SH(65)),
/*  60 */  ( 9, .SH(28)), (59, .SH(75)), (11, .SH(27)), (48, .RD(58)), (46, .RD( 3)),
/*  65 */  (14, .SH( 2)), (48, .RD(21)), (44, .SH(82)), (45, .SH(46)), (18, .SR( 2)),
/*  70 */  (47, .RD(13)), (20, .SR( 6)), (21, .SR( 7)), (22, .SR( 8)), (23, .SR( 9)),
/*  75 */  (24, .SR(10)), (25, .SR(11)), (26, .SR(12)), (27, .SH(65)), ( 3, .SH(96)),
/*  80 */  (51, .SH(54)), (52, .RD(34)), ( 6, .SH(29)), ( 7, .SH(30)), ( 8, .SH(33)),
/*  85 */  (39, .SH(11)), (10, .SH(32)), (11, .SH(31)), (12, .SH(95)), (12, .SH(95)),
/*  90 */  (14, .SH( 3)), (14, .SH( 3)), (16, .SH(34)), (16, .SH(34)), (29, .SH(15)),
/*  95 */  (30, .SH(81)), (54, .RD(38)), (44, .RD(26)), (45, .SH(46)), (46, .SH(93)),
/* 100 */  (47, .RD(13)), (13, .SH(26)), (49, .SH(92)), (50, .SH(94)), (28, .SH(25)),
/* 105 */  (51, .SH(54)), (52, .SH(80)), (31, .SR(37)), ( 3, .SH(96)), (62, .SH(71)),
/* 110 */  (63, .RD(62)), ( 6, .SH(29)), ( 7, .SH(30)), ( 8, .SH(33)), ( 5, .SH(19)),
/* 115 */  (10, .SH(32)), (11, .SH(31)), (12, .SH(95)), (56, .RD(22)), (14, .SH( 3)),
/* 120 */  ( 3, .SH(96)), (16, .SH(34)), (13, .SH(26)), ( 6, .SH(29)), ( 7, .SH(30)),
/* 125 */  ( 8, .SH(33)), (48, .SH(64)), (10, .SH(32)), (11, .SH(31)), (12, .SH(95)),
/* 130 */  (48, .SH(61)), (14, .SH( 3)), (43, .ACCEPT),   (16, .SH(34)), (62, .SH(71)),
/* 135 */  (63, .SH(70)), (31, .SR(67)), (44, .RD(26)), (45, .SH(46)), (46, .SH(93)),
/* 140 */  (47, .RD(13)), (28, .SH(18)), (49, .SH(92)), (50, .SH(91)), (60, .SH(59)),
/* 145 */  (61, .RD(57)), (57, .RD(63)), (58, .RD(64)), (31, .SR(52)), (45, .SH(38)),
/* 150 */  ( 2, .SR(66)), (47, .RD(13)), ( 3, .SH(96)), (64, .SH( 7)), (65, .SH(98)),
/* 155 */  ( 6, .SH(29)), ( 7, .SH(30)), ( 8, .SH(33)), ( 4, .SH(57)), (10, .SH(32)),
/* 160 */  (11, .SH(31)), (12, .SH(95)), ( 1, .SH(58)), (14, .SH( 3)), (15, .SH(83)),
/* 165 */  (16, .SH(34)), (45, .SH(39)), ( 3, .SH(96)), (47, .RD(13)), ( 2, .SR(65)),
/* 170 */  ( 6, .SH(29)), ( 7, .SH(30)), ( 8, .SH(33)), (31, .SR(55)), (10, .SH(32)),
/* 175 */  (11, .SH(31)), (12, .SH(95)), (19, .SH(72)), (14, .SH( 3)), ( 3, .SH(96)),
/* 180 */  (16, .SH(34)), (19, .SH(67)), ( 6, .SH(29)), ( 7, .SH(30)), ( 8, .SH(33)),
/* 185 */  ( 1, .SH(60)), (10, .SH(32)), (11, .SH(31)), (12, .SH(95)), (19, .SH(77)),
/* 190 */  (14, .SH( 3)), (15, .SH(10)), (16, .SH(34)), ( 1, .SH(55)), ( 3, .SH(96)),
/* 195 */  (31, .SR(42)), (14, .SH(20)), ( 6, .SH(29)), ( 7, .SH(30)), ( 8, .SH(33)),
/* 200 */  ( 5, .SH( 8)), (10, .SH(32)), (11, .SH(31)), (12, .SH(95)), ( 2, .SR(51)),
/* 205 */  (14, .SH( 3)), (15, .SH(12)), (16, .SH(34)), (31, .SR(41)), ( 3, .SH(96)),
/* 210 */  (60, .SH(59)), (61, .SH(74)), ( 6, .SH(29)), ( 7, .SH(30)), ( 8, .SH(33)),
/* 215 */  ( 2, .SR(44)), (10, .SH(32)), (11, .SH(31)), (12, .SH(95)), ( 5, .SH( 9)),
/* 220 */  (14, .SH( 3)), ( 3, .SH(96)), (16, .SH(34)), ( 2, .SR(43)), ( 6, .SH(29)),
/* 225 */  ( 7, .SH(30)), ( 8, .SH(33)), (31, .SR(40)), (10, .SH(32)), (11, .SH(31)),
/* 230 */  (12, .SH(95)), (14, .SH(22)), (14, .SH( 3)), (45, .SH(40)), (16, .SH(34)),
/* 235 */  (47, .RD(13)), (14, .SH(23)), (31, .SR(36)), ( 8, .ERROR ),   (11, .SH(24)),
/* 240 */  (10, .SH(32)), (11, .SH(31)), (12, .SH(95)), (45, .SH(35)), (14, .SH( 3)),
/* 245 */  (47, .RD(13)), (16, .SH(34)), (44, .SH(90)), (45, .SH(46)), (31, .SR(35)),
/* 250 */  (47, .RD(13)), (53, .RD(32)), (45, .SH(41)), ( 3, .SH(96)), (47, .RD(13)),
/* 255 */  (15, .SR(25)), ( 6, .SH(29)), ( 7, .SH(30)), ( 8, .SH(33)), ( 4, .SH( 1)),
/* 260 */  (10, .SH(32)), (11, .SH(31)), (12, .SH(95)), (28, .SH(17)), (14, .SH( 3)),
/* 265 */  ( 3, .SH(76)), (16, .SH(34)), (17, .SR( 4)), ( 6, .SH(29)), ( 7, .SH(30)),
/* 270 */  ( 8, .SH(33)), (15, .SR(24)), (10, .SH(32)), (11, .SH(31)), (12, .SH(95)),
/* 275 */  ( 0, .RD( 0)), (14, .SH( 3)), ( 3, .SH(96)), (16, .SH(34)), (19, .SR(23)),
/* 280 */  ( 6, .SH(29)), ( 7, .SH(30)), ( 8, .SH(33)), (19, .SR( 5)), (10, .SH(32)),
/* 285 */  (11, .SH(31)), (12, .SH(95)), (19, .SH(66)), (14, .SH( 3)), ( 8, .SH(33)),
/* 290 */  (16, .SH(34)), (10, .SH(32)), (11, .SH(31)), (12, .SH(95)), (45, .SH(42)),
/* 295 */  (14, .SH( 3)), (47, .RD(13)), (16, .SH(34)), (45, .SH(43)), (45, .SH(35)),
/* 300 */  (47, .RD(13)), (47, .RD(13)), (45, .SH(35)), (45, .SH(35)), (47, .RD(13)),
/* 305 */  (47, .RD(13)), (45, .SH(35)), (53, .SH( 4)), (47, .RD(13)), (55, .RD(48)),
/* 310 */  (53, .SH( 4)), (53, .SH( 4)), (55, .SH(85)), (55, .SH(79)), (53, .RD(31)),
/* 315 */  (66, .RD( 2)), (57, .RD(63)), (58, .RD(64)), (45, .SH(35)), (66, .RD( 2)),
/* 320 */  (47, .RD(13)), (66, .RD( 2)), (66, .RD( 2)), (64, .SH( 7)), (65, .RD(69)),
/* 325 */  (66, .RD( 2)), (53, .RD(39)), (45, .SH(35)), (45, .SH(35)), (47, .RD(13)),
/* 330 */  (47, .RD(13)), (44, .RD(27)), (45, .SH(46)), (66, .RD( 2)), (47, .RD(13)),
/* 335 */  (53, .RD(46)), (53, .SH(63)), (45, .SH(56)), (45, .SH(51)), (47, .RD(13)),
/* 340 */  (47, .RD(13)), (45, .SH(47)), (45, .SH(48)), (47, .RD(13)), (47, .RD(13)),
/* 345 */  (45, .SH(49)), (45, .SH(52)), (47, .RD(13)), (47, .RD(13)), (45, .SH(53)),
/* 350 */  (45, .SH(50)), (47, .RD(13)), (47, .RD(13)), (45, .SH(44)), (14, .SH( 3)),
/* 355 */  (47, .RD(13)), (16, .SH(34)),
    ]

    let yyShiftUseDefault: Int = 357
    let yyShiftOffsetMin: Int = -16
    let yyShiftOffsetMax: Int = 340
    let yyShiftOffset: [Int] = [
        /*     0 */    -2,   32,   32,   32,   -1,   -1,   -1,   -2,   -1,   -1,
        /*    10 */    -1,   -1,   -1,   51,   51,   51,   51,   51,   51,   51,
        /*    20 */    51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
        /*    30 */    51,   51,   51,   51,   51,   76,  105,  117,  149,  164,
        /*    40 */   176,  191,  206,  218,  250,  262,  274,  230,  281,  281,
        /*    50 */   230,   77,   77,   77,   65,   65,  340,  -14,  -14,   10,
        /*    60 */    10,  109,   37,   46,   88,   37,   37,  -16,   17,  113,
        /*    70 */   148,  154,  161,  158,  167,  142,  162,  184,  170,  202,
        /*    80 */   213,  195,  214,  192,  182,  221,  177,  196,  217,  222,
        /*    90 */   228,  240,  255,  235,  256,  260,  264,  268,  275,
    ]

    let yyReduceUseDefault: Int = -44
    let yyReduceOffsetMin: Int =   -43
    let yyReduceOffsetMax: Int =   308
    let yyReduceOffset: [Int] = [
        /*     0 */    89,  -43,   53,   93,  254,  257,  258,  259,  198,  261,
        /*    10 */   273,  282,  283,  -31,    2,   23,  203,  287,  -36,  -18,
        /*    20 */   104,  121,  188,  207,  249,  253,  292,  293,  296,  297,
        /*    30 */   300,  301,  304,  305,  308,   18,   18,   18,   18,   18,
        /*    40 */    18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        /*    50 */    18,   18,   18,   18,   29,   54,   18,   47,   72,   84,
        /*    60 */   150,  -11,   15,   42,   62,   78,   82,
    ]

    let yyDefaultAction: [CitronParsingAction] = [
  /*     0 */  .RD(68), .RD(28), .RD(28), .RD(28), .RD(47),
  /*     5 */  .RD(47), .RD(47), .RD(68), .ERROR , .ERROR ,
  /*    10 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    15 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    20 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    25 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    30 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    35 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    40 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    45 */  .ERROR , .RD( 1), .RD(19), .RD(18), .RD(17),
  /*    50 */  .RD(14), .RD(20), .RD(16), .RD(15), .RD(33),
  /*    55 */  .RD(33), .RD(50), .RD(60), .RD(60), .RD(56),
  /*    60 */  .RD(56), .RD(49), .RD(59), .RD(45), .RD(49),
  /*    65 */  .ERROR , .ERROR , .RD( 5), .ERROR , .ERROR ,
  /*    70 */  .ERROR , .RD(61), .ERROR , .ERROR , .ERROR ,
  /*    75 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    80 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    85 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    90 */  .ERROR , .ERROR , .RD(29), .ERROR , .ERROR ,
  /*    95 */  .ERROR , .ERROR , .ERROR , .ERROR ,
    ]

    // Fallback

    let yyHasFallback: Bool = false
    let yyFallback: [CitronSymbolNumber] = []

    // Wildcard

    let yyWildcard: CitronSymbolNumber? = nil

    // Rules

    let yyRuleInfo: [(lhs: CitronSymbolNumber, nrhs: UInt)] = [
        (lhs: 43, nrhs: 1),
        (lhs: 44, nrhs: 1),
        (lhs: 45, nrhs: 1),
        (lhs: 45, nrhs: 2),
        (lhs: 45, nrhs: 4),
        (lhs: 45, nrhs: 3),
        (lhs: 45, nrhs: 1),
        (lhs: 45, nrhs: 1),
        (lhs: 45, nrhs: 1),
        (lhs: 45, nrhs: 1),
        (lhs: 45, nrhs: 1),
        (lhs: 45, nrhs: 1),
        (lhs: 45, nrhs: 1),
        (lhs: 45, nrhs: 1),
        (lhs: 45, nrhs: 3),
        (lhs: 45, nrhs: 3),
        (lhs: 45, nrhs: 3),
        (lhs: 45, nrhs: 3),
        (lhs: 45, nrhs: 3),
        (lhs: 45, nrhs: 2),
        (lhs: 45, nrhs: 2),
        (lhs: 45, nrhs: 2),
        (lhs: 45, nrhs: 3),
        (lhs: 46, nrhs: 2),
        (lhs: 47, nrhs: 3),
        (lhs: 48, nrhs: 3),
        (lhs: 49, nrhs: 1),
        (lhs: 49, nrhs: 3),
        (lhs: 50, nrhs: 0),
        (lhs: 50, nrhs: 1),
        (lhs: 50, nrhs: 3),
        (lhs: 51, nrhs: 4),
        (lhs: 51, nrhs: 3),
        (lhs: 52, nrhs: 0),
        (lhs: 52, nrhs: 2),
        (lhs: 53, nrhs: 4),
        (lhs: 53, nrhs: 5),
        (lhs: 53, nrhs: 2),
        (lhs: 53, nrhs: 6),
        (lhs: 53, nrhs: 5),
        (lhs: 53, nrhs: 2),
        (lhs: 53, nrhs: 2),
        (lhs: 53, nrhs: 3),
        (lhs: 53, nrhs: 3),
        (lhs: 53, nrhs: 7),
        (lhs: 54, nrhs: 0),
        (lhs: 54, nrhs: 2),
        (lhs: 55, nrhs: 0),
        (lhs: 55, nrhs: 2),
        (lhs: 56, nrhs: 0),
        (lhs: 56, nrhs: 2),
        (lhs: 57, nrhs: 7),
        (lhs: 57, nrhs: 6),
        (lhs: 58, nrhs: 5),
        (lhs: 59, nrhs: 3),
        (lhs: 60, nrhs: 3),
        (lhs: 61, nrhs: 0),
        (lhs: 61, nrhs: 2),
        (lhs: 62, nrhs: 2),
        (lhs: 62, nrhs: 1),
        (lhs: 63, nrhs: 0),
        (lhs: 63, nrhs: 1),
        (lhs: 63, nrhs: 3),
        (lhs: 64, nrhs: 1),
        (lhs: 64, nrhs: 1),
        (lhs: 64, nrhs: 5),
        (lhs: 64, nrhs: 5),
        (lhs: 64, nrhs: 5),
        (lhs: 65, nrhs: 0),
        (lhs: 65, nrhs: 2),
    ]

    // Stack

    var yyStack: [(stateOrRule: CitronStateOrRule , symbolCode: CitronSymbolNumber, symbol: CitronSymbol)]  = [
        (stateOrRule: .state(0), symbolCode: 0, symbol: .yyBaseOfStack)
    ]
    var maxStackSize: Int? = nil
    var maxAttainedStackSize: Int = 0

    // Tracing

    var isTracingEnabled: Bool = false
    var isTracingPrintsSymbolValues: Bool = false
    var isTracingPrintsTokenValues: Bool = false
    let yySymbolName: [String] = [
    /*  0 */ "$",
    /*  1 */ "LEFT_CURLY_BRACE",
    /*  2 */ "RIGHT_CURLY_BRACE",
    /*  3 */ "COLON",
    /*  4 */ "COMMA",
    /*  5 */ "DBLARROW",
    /*  6 */ "OR",
    /*  7 */ "AND",
    /*  8 */ "EQUAL_EQUAL",
    /*  9 */ "NOT",
    /* 10 */ "PLUS",
    /* 11 */ "MINUS",
    /* 12 */ "PERIOD",
    /* 13 */ "ARROW",
    /* 14 */ "LEFT_PARENTHESIS",
    /* 15 */ "RIGHT_PARENTHESIS",
    /* 16 */ "LEFT_SQUARE_BRACKET",
    /* 17 */ "RIGHT_SQUARE_BRACKET",
    /* 18 */ "IDENTIFIER",
    /* 19 */ "Identifier",
    /* 20 */ "Integer_literal",
    /* 21 */ "TRUE",
    /* 22 */ "FALSE",
    /* 23 */ "INT",
    /* 24 */ "BOOL",
    /* 25 */ "TYPE",
    /* 26 */ "AUTO",
    /* 27 */ "FNTY",
    /* 28 */ "EQUAL",
    /* 29 */ "CASE",
    /* 30 */ "DEFAULT",
    /* 31 */ "SEMICOLON",
    /* 32 */ "VAR",
    /* 33 */ "IF",
    /* 34 */ "WHILE",
    /* 35 */ "BREAK",
    /* 36 */ "CONTINUE",
    /* 37 */ "RETURN",
    /* 38 */ "MATCH",
    /* 39 */ "ELSE",
    /* 40 */ "FN",
    /* 41 */ "STRUCT",
    /* 42 */ "CHOICE",
    /* 43 */ "input",
    /* 44 */ "pattern",
    /* 45 */ "expression",
    /* 46 */ "member_designator",
    /* 47 */ "paren_expression",
    /* 48 */ "tuple",
    /* 49 */ "field",
    /* 50 */ "field_list",
    /* 51 */ "match_clause",
    /* 52 */ "match_clause_list",
    /* 53 */ "statement",
    /* 54 */ "optional_else",
    /* 55 */ "statement_list",
    /* 56 */ "return_type",
    /* 57 */ "function_definition",
    /* 58 */ "function_declaration",
    /* 59 */ "variable_declaration",
    /* 60 */ "member",
    /* 61 */ "member_list",
    /* 62 */ "alternative",
    /* 63 */ "alternative_list",
    /* 64 */ "declaration",
    /* 65 */ "declaration_list",
    ]
    let yyRuleText: [String] = [
        /*   0 */ "input ::= declaration_list(d)",
        /*   1 */ "pattern ::= expression(e)",
        /*   2 */ "expression ::= IDENTIFIER",
        /*   3 */ "expression ::= expression member_designator",
        /*   4 */ "expression ::= expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET",
        /*   5 */ "expression ::= expression COLON Identifier",
        /*   6 */ "expression ::= Integer_literal",
        /*   7 */ "expression ::= TRUE",
        /*   8 */ "expression ::= FALSE",
        /*   9 */ "expression ::= INT",
        /*  10 */ "expression ::= BOOL",
        /*  11 */ "expression ::= TYPE",
        /*  12 */ "expression ::= AUTO",
        /*  13 */ "expression ::= paren_expression",
        /*  14 */ "expression ::= expression EQUAL_EQUAL expression",
        /*  15 */ "expression ::= expression PLUS expression",
        /*  16 */ "expression ::= expression MINUS expression",
        /*  17 */ "expression ::= expression AND expression",
        /*  18 */ "expression ::= expression OR expression",
        /*  19 */ "expression ::= NOT expression",
        /*  20 */ "expression ::= MINUS expression",
        /*  21 */ "expression ::= expression tuple",
        /*  22 */ "expression ::= FNTY tuple return_type",
        /*  23 */ "member_designator ::= PERIOD Identifier",
        /*  24 */ "paren_expression ::= LEFT_PARENTHESIS field_list RIGHT_PARENTHESIS",
        /*  25 */ "tuple ::= LEFT_PARENTHESIS field_list RIGHT_PARENTHESIS",
        /*  26 */ "field ::= pattern",
        /*  27 */ "field ::= member_designator EQUAL pattern",
        /*  28 */ "field_list ::=",
        /*  29 */ "field_list ::= field",
        /*  30 */ "field_list ::= field COMMA field_list",
        /*  31 */ "match_clause ::= CASE pattern DBLARROW statement",
        /*  32 */ "match_clause ::= DEFAULT DBLARROW statement",
        /*  33 */ "match_clause_list ::=",
        /*  34 */ "match_clause_list ::= match_clause match_clause_list",
        /*  35 */ "statement ::= expression EQUAL expression SEMICOLON",
        /*  36 */ "statement ::= VAR pattern MINUS expression SEMICOLON",
        /*  37 */ "statement ::= expression SEMICOLON",
        /*  38 */ "statement ::= IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement optional_else",
        /*  39 */ "statement ::= WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement",
        /*  40 */ "statement ::= BREAK SEMICOLON",
        /*  41 */ "statement ::= CONTINUE SEMICOLON",
        /*  42 */ "statement ::= RETURN expression SEMICOLON",
        /*  43 */ "statement ::= LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE",
        /*  44 */ "statement ::= MATCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACE match_clause_list RIGHT_CURLY_BRACE",
        /*  45 */ "optional_else ::=",
        /*  46 */ "optional_else ::= ELSE statement",
        /*  47 */ "statement_list ::=",
        /*  48 */ "statement_list ::= statement statement_list",
        /*  49 */ "return_type ::=",
        /*  50 */ "return_type ::= ARROW expression",
        /*  51 */ "function_definition ::= FN Identifier tuple return_type LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE",
        /*  52 */ "function_definition ::= FN Identifier tuple DBLARROW expression SEMICOLON",
        /*  53 */ "function_declaration ::= FN Identifier tuple return_type SEMICOLON",
        /*  54 */ "variable_declaration ::= expression COLON Identifier",
        /*  55 */ "member ::= VAR variable_declaration SEMICOLON",
        /*  56 */ "member_list ::=",
        /*  57 */ "member_list ::= member member_list",
        /*  58 */ "alternative ::= Identifier tuple",
        /*  59 */ "alternative ::= Identifier",
        /*  60 */ "alternative_list ::=",
        /*  61 */ "alternative_list ::= alternative",
        /*  62 */ "alternative_list ::= alternative COMMA alternative_list",
        /*  63 */ "declaration ::= function_definition",
        /*  64 */ "declaration ::= function_declaration",
        /*  65 */ "declaration ::= STRUCT Identifier LEFT_CURLY_BRACE member_list RIGHT_CURLY_BRACE",
        /*  66 */ "declaration ::= CHOICE Identifier LEFT_CURLY_BRACE alternative_list RIGHT_CURLY_BRACE",
        /*  67 */ "declaration ::= VAR variable_declaration EQUAL expression SEMICOLON",
        /*  68 */ "declaration_list ::=",
        /*  69 */ "declaration_list ::= declaration declaration_list",
    ]

    // Function definitions

    func yyTokenToSymbol(_ token: CitronToken) -> CitronSymbol {
        return .yy0(token)
    }

    func yyInvokeCodeBlockForRule(ruleNumber: CitronRuleNumber) throws -> CitronSymbol {
        switch (ruleNumber) {
        case 0: /* input ::= declaration_list(d) */
            func codeBlockForRule00(d: [Declaration]) throws -> [Declaration] {d }
            if case .yy55(let d) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy55(try codeBlockForRule00(d: d))
            }
        case 1: /* pattern ::= expression(e) */
            func codeBlockForRule01(e: Expression) throws -> Expression {e }
            if case .yy53(let e) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy53(try codeBlockForRule01(e: e))
            }
        case 2: /* expression ::= IDENTIFIER */
            func codeBlockForRule02() throws -> Expression { }
            return .yy53(try codeBlockForRule02())
        case 3: /* expression ::= expression member_designator */
            func codeBlockForRule03() throws -> Expression { }
            return .yy53(try codeBlockForRule03())
        case 4: /* expression ::= expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET */
            func codeBlockForRule04() throws -> Expression { }
            return .yy53(try codeBlockForRule04())
        case 5: /* expression ::= expression COLON Identifier */
            func codeBlockForRule05() throws -> Expression { }
            return .yy53(try codeBlockForRule05())
        case 6: /* expression ::= Integer_literal */
            func codeBlockForRule06() throws -> Expression { }
            return .yy53(try codeBlockForRule06())
        case 7: /* expression ::= TRUE */
            func codeBlockForRule07() throws -> Expression { }
            return .yy53(try codeBlockForRule07())
        case 8: /* expression ::= FALSE */
            func codeBlockForRule08() throws -> Expression { }
            return .yy53(try codeBlockForRule08())
        case 9: /* expression ::= INT */
            func codeBlockForRule09() throws -> Expression { }
            return .yy53(try codeBlockForRule09())
        case 10: /* expression ::= BOOL */
            func codeBlockForRule10() throws -> Expression { }
            return .yy53(try codeBlockForRule10())
        case 11: /* expression ::= TYPE */
            func codeBlockForRule11() throws -> Expression { }
            return .yy53(try codeBlockForRule11())
        case 12: /* expression ::= AUTO */
            func codeBlockForRule12() throws -> Expression { }
            return .yy53(try codeBlockForRule12())
        case 13: /* expression ::= paren_expression */
            func codeBlockForRule13() throws -> Expression { }
            return .yy53(try codeBlockForRule13())
        case 14: /* expression ::= expression EQUAL_EQUAL expression */
            func codeBlockForRule14() throws -> Expression { }
            return .yy53(try codeBlockForRule14())
        case 15: /* expression ::= expression PLUS expression */
            func codeBlockForRule15() throws -> Expression { }
            return .yy53(try codeBlockForRule15())
        case 16: /* expression ::= expression MINUS expression */
            func codeBlockForRule16() throws -> Expression { }
            return .yy53(try codeBlockForRule16())
        case 17: /* expression ::= expression AND expression */
            func codeBlockForRule17() throws -> Expression { }
            return .yy53(try codeBlockForRule17())
        case 18: /* expression ::= expression OR expression */
            func codeBlockForRule18() throws -> Expression { }
            return .yy53(try codeBlockForRule18())
        case 19: /* expression ::= NOT expression */
            func codeBlockForRule19() throws -> Expression { }
            return .yy53(try codeBlockForRule19())
        case 20: /* expression ::= MINUS expression */
            func codeBlockForRule20() throws -> Expression { }
            return .yy53(try codeBlockForRule20())
        case 21: /* expression ::= expression tuple */
            func codeBlockForRule21() throws -> Expression { }
            return .yy53(try codeBlockForRule21())
        case 22: /* expression ::= FNTY tuple return_type */
            func codeBlockForRule22() throws -> Expression { }
            return .yy53(try codeBlockForRule22())
        case 23: /* member_designator ::= PERIOD Identifier */
            func codeBlockForRule23() throws -> MemberDesignator { }
            return .yy25(try codeBlockForRule23())
        case 24: /* paren_expression ::= LEFT_PARENTHESIS field_list RIGHT_PARENTHESIS */
            func codeBlockForRule24() throws -> Expression { }
            return .yy53(try codeBlockForRule24())
        case 25: /* tuple ::= LEFT_PARENTHESIS field_list RIGHT_PARENTHESIS */
            func codeBlockForRule25() throws -> TupleLiteral { }
            return .yy48(try codeBlockForRule25())
        case 26: /* field ::= pattern */
            func codeBlockForRule26() throws -> Expression { }
            return .yy53(try codeBlockForRule26())
        case 27: /* field ::= member_designator EQUAL pattern */
            func codeBlockForRule27() throws -> Expression { }
            return .yy53(try codeBlockForRule27())
        case 28: /* field_list ::= */
            func codeBlockForRule28() throws -> [Expression] { }
            return .yy41(try codeBlockForRule28())
        case 29: /* field_list ::= field */
            func codeBlockForRule29() throws -> [Expression] { }
            return .yy41(try codeBlockForRule29())
        case 30: /* field_list ::= field COMMA field_list */
            func codeBlockForRule30() throws -> [Expression] { }
            return .yy41(try codeBlockForRule30())
        case 31: /* match_clause ::= CASE pattern DBLARROW statement */
            func codeBlockForRule31() throws -> MatchClause { }
            return .yy43(try codeBlockForRule31())
        case 32: /* match_clause ::= DEFAULT DBLARROW statement */
            func codeBlockForRule32() throws -> MatchClause { }
            return .yy43(try codeBlockForRule32())
        case 33: /* match_clause_list ::= */
            func codeBlockForRule33() throws -> [MatchClause] { }
            return .yy131(try codeBlockForRule33())
        case 34: /* match_clause_list ::= match_clause match_clause_list */
            func codeBlockForRule34() throws -> [MatchClause] { }
            return .yy131(try codeBlockForRule34())
        case 35: /* statement ::= expression EQUAL expression SEMICOLON */
            func codeBlockForRule35() throws -> Statement { }
            return .yy98(try codeBlockForRule35())
        case 36: /* statement ::= VAR pattern MINUS expression SEMICOLON */
            func codeBlockForRule36() throws -> Statement { }
            return .yy98(try codeBlockForRule36())
        case 37: /* statement ::= expression SEMICOLON */
            func codeBlockForRule37() throws -> Statement { }
            return .yy98(try codeBlockForRule37())
        case 38: /* statement ::= IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement optional_else */
            func codeBlockForRule38() throws -> Statement { }
            return .yy98(try codeBlockForRule38())
        case 39: /* statement ::= WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement */
            func codeBlockForRule39() throws -> Statement { }
            return .yy98(try codeBlockForRule39())
        case 40: /* statement ::= BREAK SEMICOLON */
            func codeBlockForRule40() throws -> Statement { }
            return .yy98(try codeBlockForRule40())
        case 41: /* statement ::= CONTINUE SEMICOLON */
            func codeBlockForRule41() throws -> Statement { }
            return .yy98(try codeBlockForRule41())
        case 42: /* statement ::= RETURN expression SEMICOLON */
            func codeBlockForRule42() throws -> Statement { }
            return .yy98(try codeBlockForRule42())
        case 43: /* statement ::= LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE */
            func codeBlockForRule43() throws -> Statement { }
            return .yy98(try codeBlockForRule43())
        case 44: /* statement ::= MATCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACE match_clause_list RIGHT_CURLY_BRACE */
            func codeBlockForRule44() throws -> Statement { }
            return .yy98(try codeBlockForRule44())
        case 45: /* optional_else ::= */
            func codeBlockForRule45() throws -> Statement? { }
            return .yy109(try codeBlockForRule45())
        case 46: /* optional_else ::= ELSE statement */
            func codeBlockForRule46() throws -> Statement? { }
            return .yy109(try codeBlockForRule46())
        case 47: /* statement_list ::= */
            func codeBlockForRule47() throws -> [Statement] { }
            return .yy58(try codeBlockForRule47())
        case 48: /* statement_list ::= statement statement_list */
            func codeBlockForRule48() throws -> [Statement] { }
            return .yy58(try codeBlockForRule48())
        case 49: /* return_type ::= */
            func codeBlockForRule49() throws -> TypeExpression { }
            return .yy87(try codeBlockForRule49())
        case 50: /* return_type ::= ARROW expression */
            func codeBlockForRule50() throws -> TypeExpression { }
            return .yy87(try codeBlockForRule50())
        case 51: /* function_definition ::= FN Identifier tuple return_type LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE */
            func codeBlockForRule51() throws -> FunctionDefinition { }
            return .yy84(try codeBlockForRule51())
        case 52: /* function_definition ::= FN Identifier tuple DBLARROW expression SEMICOLON */
            func codeBlockForRule52() throws -> FunctionDefinition { }
            return .yy84(try codeBlockForRule52())
        case 53: /* function_declaration ::= FN Identifier tuple return_type SEMICOLON */
            func codeBlockForRule53() throws -> FunctionDeclaration { }
            return .yy42(try codeBlockForRule53())
        case 54: /* variable_declaration ::= expression COLON Identifier */
            func codeBlockForRule54() throws -> (name: String, type: Expression) { }
            return .yy52(try codeBlockForRule54())
        case 55: /* member ::= VAR variable_declaration SEMICOLON */
            func codeBlockForRule55() throws -> Member { }
            return .yy117(try codeBlockForRule55())
        case 56: /* member_list ::= */
            func codeBlockForRule56() throws -> [Member] { }
            return .yy125(try codeBlockForRule56())
        case 57: /* member_list ::= member member_list */
            func codeBlockForRule57() throws -> [Member] { }
            return .yy125(try codeBlockForRule57())
        case 58: /* alternative ::= Identifier tuple */
            func codeBlockForRule58() throws -> Alternative { }
            return .yy116(try codeBlockForRule58())
        case 59: /* alternative ::= Identifier */
            func codeBlockForRule59() throws -> Alternative { }
            return .yy116(try codeBlockForRule59())
        case 60: /* alternative_list ::= */
            func codeBlockForRule60() throws -> [Alternative] { }
            return .yy44(try codeBlockForRule60())
        case 61: /* alternative_list ::= alternative */
            func codeBlockForRule61() throws -> [Alternative] { }
            return .yy44(try codeBlockForRule61())
        case 62: /* alternative_list ::= alternative COMMA alternative_list */
            func codeBlockForRule62() throws -> [Alternative] { }
            return .yy44(try codeBlockForRule62())
        case 63: /* declaration ::= function_definition */
            func codeBlockForRule63() throws -> Declaration { }
            return .yy67(try codeBlockForRule63())
        case 64: /* declaration ::= function_declaration */
            func codeBlockForRule64() throws -> Declaration { }
            return .yy67(try codeBlockForRule64())
        case 65: /* declaration ::= STRUCT Identifier LEFT_CURLY_BRACE member_list RIGHT_CURLY_BRACE */
            func codeBlockForRule65() throws -> Declaration { }
            return .yy67(try codeBlockForRule65())
        case 66: /* declaration ::= CHOICE Identifier LEFT_CURLY_BRACE alternative_list RIGHT_CURLY_BRACE */
            func codeBlockForRule66() throws -> Declaration { }
            return .yy67(try codeBlockForRule66())
        case 67: /* declaration ::= VAR variable_declaration EQUAL expression SEMICOLON */
            func codeBlockForRule67() throws -> Declaration { }
            return .yy67(try codeBlockForRule67())
        case 68: /* declaration_list ::= */
            func codeBlockForRule68() throws -> [Declaration] { }
            return .yy55(try codeBlockForRule68())
        case 69: /* declaration_list ::= declaration declaration_list */
            func codeBlockForRule69() throws -> [Declaration] { }
            return .yy55(try codeBlockForRule69())
        default:
            fatalError("Can't invoke code block for rule number \(ruleNumber) - no such rule")
        }
        fatalError("Can't resolve types correctly for invoking code block for rule number \(ruleNumber)")
    }

    private func yySymbolOnStack(distanceFromTop: Int) -> CitronSymbol {
        assert(yyStack.count > distanceFromTop)
        return yyStack[yyStack.count - 1 - distanceFromTop].symbol
    }

    func yyUnwrapResultFromSymbol(_ symbol: CitronSymbol) -> CitronResult {
        if case .yy55(let result) = symbol {
            return result
        } else {
            fatalError("Unexpected mismatch in result type")
        }
    }

    // Error capturing

    typealias CitronErrorCaptureDelegate = _CarbonParserCitronErrorCaptureDelegate

    weak var errorCaptureDelegate: CitronErrorCaptureDelegate? = nil

    let yyErrorCaptureSymbolNumbersForState: [CitronStateNumber:[CitronSymbolNumber]] = [:]
    let yyCanErrorCapture: Bool = false
    let yyErrorCaptureDirectives: [CitronSymbolNumber:(endAfter:[[CitronTokenCode]],endBefore:[CitronTokenCode])] = [:]
    let yyErrorCaptureEndBeforeTokens: Set<CitronSymbolNumber> = []

    let yyErrorCaptureEndAfterSequenceEndingTokens: Set<CitronSymbolNumber> = []

    func yyShouldSaveErrorForCapturing(error: Error) -> Bool {
        fatalError("This parser was not generated with error capturing information")
    }

    func yyCaptureError(on symbolCode: CitronNonTerminalCode, error: Error, state: CitronErrorCaptureState) -> CitronSymbol? {
        fatalError("This parser was not generated with error capturing information")
    }

    func yySymbolContent(_ symbol: CitronSymbol) -> Any { return symbol.typeErasedContent() }

    let yyStartSymbolNumber: CitronSymbolNumber = 43
    let yyEndStateNumber: CitronStateNumber = 98

    var yyErrorCaptureSavedError: (error: Error, isLexerError: Bool)? = nil
    var yyErrorCaptureTokensSinceError: [(token: CitronToken, tokenCode: CitronTokenCode)] = []
    var yyErrorCaptureStackIndices: [Int] = []
    var yyErrorCaptureStartSymbolStackIndex: Int? = nil

    var numberOfCapturedErrors: Int = 0
}

protocol _CarbonParserCitronErrorCaptureDelegate : class {
    func shouldSaveErrorForCapturing(error: Error) -> Bool
}

extension _CarbonParserCitronErrorCaptureDelegate {
    func shouldSaveErrorForCapturing(error: Error) -> Bool {
        return true
    }
}

// Ability to use == to compare CitronSymbolCode with CitronTokenCode / CitronNonTerminalCode

extension CarbonParser.CitronSymbolCode {
    static func == (a: CarbonParser.CitronSymbolCode, b: CarbonParser.CitronTokenCode) -> Bool {
        guard case let .token(code) = a else { return false }
        return (code == b)
    }
    static func == (a: CarbonParser.CitronTokenCode, b: CarbonParser.CitronSymbolCode) -> Bool {
        guard case let .token(code) = b else { return false }
        return (code == a)
    }
    static func == (a: CarbonParser.CitronSymbolCode, b: CarbonParser.CitronNonTerminalCode) -> Bool {
        guard case let .nonterminal(code) = a else { return false }
        return (code == b)
    }
    static func == (a: CarbonParser.CitronNonTerminalCode, b: CarbonParser.CitronSymbolCode) -> Bool {
        guard case let .nonterminal(code) = b else { return false }
        return (code == a)
    }
}

// Ability to use switch (symbolCode) { case .tokenCode: ...; case .nonterminalCode: ... }

extension CarbonParser.CitronSymbolCode {
    static func ~= (pattern: CarbonParser.CitronTokenCode, value: CarbonParser.CitronSymbolCode) -> Bool {
        return (pattern == value)
    }
    static func ~= (pattern: CarbonParser.CitronNonTerminalCode, value: CarbonParser.CitronSymbolCode) -> Bool {
        return (pattern == value)
    }
}
